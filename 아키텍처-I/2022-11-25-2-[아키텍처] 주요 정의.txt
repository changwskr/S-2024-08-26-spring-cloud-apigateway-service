● 게이트웨이가 필요한 이유
	- 인증 및 권한 부여
	- 서비스 검색 통합
	- 응답캐싱
	- 정책, 회로 차단기 및 QoS 다시 시도
	- 속도 제한
	- 부하 분산
	- 로깅 추적 상관 관계
	- IP 허용 목록 관리

● spring-cloud에서 MSA 간 통신을 위해 사용하는 아키텍처는
	- RestTemplate 방식 // 템플릿을 통해서 마이클로서비스를 호출하는 방식이다.
		RestRemplate restTemplate = new RestTemplate();
		restTemplate.getForObject("httpL//localhost:8080/", User.class, 200)
	- Fegign Client 방식
	     // 이것은 마이크로서비스 이름으로 마이크로서비스를 호출하는 방식이다.
	     // 여기서는 stores라는 서비스를 호출하는 것을 보여준다.
		@FegignClient("stores")
		public interface StoreClient {
			@RequestMapping(method=RequestMethod.GET, value="/stores")
			List<store> getStores();
		}
	두가지 존재
	
● 초창기 로드밸런서의 특징은
리본의 경우에는 Client side 로드밸런서였다.
리본은 서비스의 이름으로 호출하고 health_check도 했다.
최근 로드밸런서와는 맞지 않다.
요즘은 게이트웨이에서 사용한다.
어째든 장점은 서비스명으로 로드밸런스가 되었고 지금은 사용안한다.
    - Ribbon: Client side load Balancer
      리본은 클라이언트에서 서버로의 로드밸런싱을 한다. 그런데 리본 자체가 비동기화 방식이 지원이 잘되지 않는다. 최근에는 잘 사용안함
    - 리본은 클라이언트측 내부에 로드밸런서 모듈을 가지고 서버측의 마이크로서비스를 호출한다.
    - 최근 스프링클라우드에서 리본은 더이상 사용하지 않는다.


● Zuul 구현
게이트웨이다.
클라이언는 zuul에게 전달하고 zuul이 직접 서비스와 연계한다.
Zuul도 스프링 2.4 부터는 maintence 상태가 되었다.
    - First Service
    - Second Service

    클라이언트 요청을 zuul이 서비스로 라우팅한다.
이 zuul 도 더이상 사용되지 않는다.


● 대체 솔루션
	- Hystrix ~ Resilience4j
	- Hystrix Dashboard ~ Micrometer Monitoring System
	- Ribbon ~ Spring cloud loadbalacer
	- Zuul ~ Spring Cloud Gateway
	
만약 대체 솔루션을 사용하고 싶다면 spring-cloud 버전을 하위버전으로 다운그레이드 하면 된다.
	
	







	