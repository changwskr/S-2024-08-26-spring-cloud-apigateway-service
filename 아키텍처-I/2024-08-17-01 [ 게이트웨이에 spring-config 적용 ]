user-service에 spring-config 적용이후 작업한다.
spring-config를 적용해보자

#--------------------------------------------------------------------------
[pom.xml]
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bootstrap</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

#--------------------------------------------------------------------------
[bootstrap.yml]
        spring:
          cloud:
            config:
              uri: http://127.0.0.1:8888
              name: ecommerce
#--------------------------------------------------------------------------
[application.yml]

@  token은 삭제한다.
@              token:
@                expiration_time: 86400000
@                secret: user_token
@ management 추가한다.
@   management:
@     endpoints:
@       web:
@         exposure:
@           include: refresh, health, beans, httptrace, busrefresh, info, metrics, prometheus
@       health:
@         show-details: always
@ actuator 추가한다.
@        - id: user-service
@          uri: lb://USER-SERVICE   ## 이적용으로 게이트웨이에서 refresh health 등이 다 적용된다.
@          predicates:
@            - Path=/user-service/actuator/**
@            - Method=GET,POST
@          filters:
@            - RemoveRequestHeader=Cookie
@            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

                server:
                  port: 8000

                spring:
                  application:
                    name: apigateway-service
                  cloud:
                    gateway:
                      default-filters:
                        - name: GlobalFilter
                          args:
                            baseMessage: Spring Cloud Gateway Global Filter
                            preLogger: true
                            postLogger: true
                      routes:

                        - id: first-service
                          #          uri: http://localhost:8081 # 기존 방식
                          uri: lb://MY-FIRST-SERVICE    # 유레카 적용이후 방식
                          predicates:
                            - Path=/first-service/**
                          filters:
                            - AddRequestHeader=first-request, first-request-header2
                            - AddResponseHeader=first-response, first-response-header2
                            - CustomFilter
                        - id: second-service
                          #          uri: http://localhost:8082
                          uri: lb://MY-SECOND-SERVICE
                          predicates:
                            - Path=/second-service/**
                          filters:
                            - AddRequestHeader=second-request, second-request-header2
                            - AddResponseHeader=second-response, second-response-header2
                            - name: CustomFilter
                            - name: LoggingFilter
                              args:
                                baseMessage: Hi, there.
                                preLogger: true
                                postLogger: true
                        - id: third-service
                          #          uri: http://localhost:8083
                          uri: lb://MY-THIRD-SERVICE
                          predicates:
                            - Path=/third-service/**
                          filters:
                            - AddRequestHeader=third-request, third-request-header2
                            - AddResponseHeader=third-response, third-response-header2
                            - CustomFilter
                        - id: user-service
                          uri: lb://USER-SERVICE
                          predicates:
                            - Path=/user-service/login # 로그인도 권한 필요 없다.
                            - Method=POST
                          filters:
                            - RemoveRequestHeader=Cookie # 헤더에 있는 쿠키정보는 제거하자
                            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
                        - id: user-service
                          uri: lb://USER-SERVICE
                          predicates:
                            - Path=/user-service/users # 회원가입은 권한 필요없다
                            - Method=POST
                          filters:
                            - RemoveRequestHeader=Cookie
                            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
                        - id: user-service
                          uri: lb://USER-SERVICE
                          predicates:
                            - Path=/user-service/**  # 이 부분의 서비스는 권한이 필요하다.
                            - Method=GET
                          filters:
                            - RemoveRequestHeader=Cookie
                            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
                            - AuthorizationHeaderFilter
                        - id: user-service
                          uri: lb://USER-SERVICE
                          predicates:
                            - Path=/user-service/actuator/**
                            - Method=GET,POST
                          filters:
                            - RemoveRequestHeader=Cookie
                            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

                        # ---
                        - id: order-service
                          uri: lb://ORDER-SERVICE
                          predicates:
                            - Path=/order-service/actuator/**
                            - Method=GET,POST

                        - id: order-service
                          uri: lb://ORDER-SERVICE
                          predicates:
                            - Path=/order-service/**

                        # ---
                        - id: catalog-service
                          uri: lb://CATALOG-SERVICE
                          predicates:
                            - Path=/catalog-service/actuator/**
                            - Method=GET,POST

                        - id: catalog-service
                          uri: lb://CATALOG-SERVICE
                          predicates:
                            - Path=/catalog-service/**
                #--------------------------------------------------------------------------------------------------------------
                eureka:
                  instance:
                    hostname: localhost
                  client:
                    register-with-eureka: true
                    fetch-registry: true
                    service-url:
                      defaultZone: http://localhost:8761/eureka
                #-------------추가작업 httptrace-------------------------------------------------------------------------------
                management:
                  endpoints:
                    web:
                      exposure:
                        include: refresh, health, beans, httptrace, busrefresh, info, metrics, prometheus
                    health:
                      show-details: always

#--------------------------------------------------------------------------
[소스변경] httpTraceRepository 추가

@SpringBootApplication
public class ApigatewayServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(ApigatewayServiceApplication.class, args);
    }

    /**
     * git test version
     * @return
     */
    @Bean
    public HttpTraceRepository httpTraceRepository() {
        return new InMemoryHttpTraceRepository();
    }
}

#--------------------------------------------------------------------------
[기동 마이크로서비스]
    - user-service
    - spring-config-service
    - eureca-service
    - gateway-service

    mvn spring-boot:run

[테스트 절차]
    1) 회원가입
        http://127.0.0.1:8000/user-service/users
        {
            "name": "EE",
        	"email" : "EE@EE.COM",
        	"pwd": "1234"
        }
    2) 로그인
        http://127.0.0.1:8000/user-service/login
        {
        	"email" : "EE@EE.COM",
        	"password": "1234"
        }

        -> 인증토권 (획득)

    3) 헬스 점검
        http://127.0.0.1:8000/user-service/health_check
        It's Working in User Service,
                        port(local.server.port)=61321, port(server.port)=0,
                        gateway ip=192.168.0.8,
                        message=Welcome to the Simple E-commerce.,
                        token secret=user_token,
                        token expiration time=86400000

    4) actuator -
        GET health - http://127.0.0.1:8000/user-service/actuator/health
        POST refresh - http://localhost:8000/user-service/actuator/refresh

    4) 환경 파일 전파
        (post)http://localhost:8000/actuator/refresh
        (post)http://localhost:8000/actuator/busrefresh
        (post)http://localhost:8000/user-service/actuator/busrefresh

        http://localhost:8000/user-service/actuator/health
        http://localhost:8888/ecommerce/default
        http://localhost:8888/ecommerce/dev

    2) 헬스체킹
        http://localhost:8000/user-service/health_check
        http://localhost:8000/order-service/health_check
        http://localhost:8000/catalog-service/health_check
        http://localhost:8000/user-service/actuator/health

